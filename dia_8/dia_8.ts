/**
 * ‚úÖ 1. TypeScript + Node.js / Express
 * üóÇ Estrutura de projeto comum:
 * /src
  ‚îú‚îÄ controllers/
  ‚îú‚îÄ routes/
  ‚îú‚îÄ services/
  ‚îú‚îÄ models/
  ‚îú‚îÄ types/
  ‚îî‚îÄ index.ts
 */

  /**
   * üß™ Exemplo: tipo de usu√°rio
   */

// types/User.ts
export interface User {
  id: number;
  name: string;
  email: string;
}

/**
 * ‚ú® Usando em uma rota:
 */

import { Request, Response } from "express";
import { User } from "./types/User";

const users: User[] = [];

export const getUsers = (req: Request, res: Response) => {
  res.json(users);
};

/**
 * ‚úÖ 2. TypeScript + React
 * üß™ Componente com props tipadas:
 */

type BotaoProps = {
  texto: string;
  onClick: () => void;
};

export function Botao({ texto, onClick }: BotaoProps) {
  return <button onClick={onClick}>{texto}</button>;
}

/**
 * üß† Dica: use React.FC<Props> quando quiser infer√™ncia autom√°tica de children.
 */

const Card: React.FC<{ titulo: string }> = ({ titulo, children }) => (
  <div>
    <h2>{titulo}</h2>
    <div>{children}</div>
  </div>
);

/**
 * ‚úÖ 3. Tipando chamadas de API REST
 * Front-end:
 */

type Post = {
  id: number;
  title: string;
};

async function buscarPosts(): Promise<Post[]> {
  const res = await fetch("/api/posts");
  return res.json();
}

/**
 * ‚úÖ 4. Tipando respostas GraphQL
 */

type GraphQLResponse<T> = {
  data?: T;
  errors?: { message: string }[];
};

// Exemplo de uso:
type Usuario = { nome: string };
type Resposta = GraphQLResponse<{ usuario: Usuario }>;

/**
 * ‚úÖ 5. Valida√ß√£o com Zod
 * Zod √© uma lib de valida√ß√£o de dados com tipagem autom√°tica:
 */

import { z } from "zod";

const schemaUsuario = z.object({
  nome: z.string(),
  idade: z.number().int().positive(),
});

type Usuario = z.infer<typeof schemaUsuario>;

/**
 * üß™ Exemplo de valida√ß√£o:
 */

const entrada = { nome: "Gabriel", idade: 28 };
const resultado = schemaUsuario.safeParse(entrada);

if (!resultado.success) {
  console.error(resultado.error);
}

/**
 * ‚úÖ 6. Boas pr√°ticas com TypeScript
 * 
 * | Pr√°tica                            | Por qu√™?                            |
   | ---------------------------------- | ----------------------------------- |
   | Use sempre interfaces/types        | Organiza√ß√£o e reuso                 |
   | Nunca use `any`                    | Perde todo o poder do TS            |
   | Crie arquivos `types/`             | Centralize suas defini√ß√µes          |
   | Tipar retorno de fun√ß√µes           | Ajuda o IntelliSense e previne bugs |
   | Usar `zod` ou `class-validator`    | Para validar entrada de APIs        |
   | Use `eslint` + `typescript-eslint` | Para manter o c√≥digo limpo          |
 */

/**
 * üß™ Exerc√≠cio do Dia 8:
 * Imagine que voc√™ est√° criando uma API de usu√°rios. Fa√ßa:
 * 1. Crie um tipo ou interface Usuario com id, nome, email
 * 2. Crie uma fun√ß√£o listarUsuarios(): Usuario[]
 * 3. Crie um schema Zod baseado nesse tipo
 * 4. Fa√ßa uma fun√ß√£o que valide um objeto e retorne se ele √© um usu√°rio v√°lido
 */

type exUsuario = {
    id: number
    nome: string
    email: string
}

function listarUsuarios(): exUsuario[] {
    return [
        { id: 1, nome: "Gabriel", email: ""}
    ]
}

const schemaExUsuario = z.object({
    id: z.number().int().positive(),
    nome: z.string(),
    email: z.string(),
})

const exEntrada = { id: 1, nome: "Gabriel", email: "" };
const exResultado = schemaExUsuario.safeParse(exEntrada);

if (!exResultado.success) {
  console.error(exResultado.error);
}