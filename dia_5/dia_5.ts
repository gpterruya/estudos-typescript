/**
 * üéØ Objetivo do Dia 5:
 * 1. Entender e usar Gen√©ricos (<T>)
 * 2. Aprender Union Types e Intersection Types
 * 3. Conhecer Tipos Utilit√°rios (Partial, Readonly, Pick, Omit)
 * 4. Ver o conceito de Type Narrowing (refinamento de tipo)
 */

/**
 * ‚úÖ 1. Gen√©ricos (<T>)
 * O que √©?
 * Gen√©ricos s√£o como tipos flex√≠veis e reutiliz√°veis. Voc√™ define um tipo "gen√©rico" que ser√° substitu√≠do por um tipo espec√≠fico no momento do uso.
 * 
 * Exemplo b√°sico:
 */

function identidade<T>(valor: T): T {
  return valor;
}

const numero = identidade<number>(42);
const texto = identidade<string>("Gabriel");

/**
 * Aqui o <T> pode ser qualquer tipo (number, string, boolean, Pessoa, etc).
 */

/**
 * Gen√©ricos com Arrays:
 */

function primeiroElemento<T>(arr: T[]): T {
  return arr[0];
}

const primeiro = primeiroElemento(["a", "b", "c"]); // string

/**
 * Gen√©rico com interface:
 */

interface Caixa<T> {
  valor: T;
}

const caixaNumero: Caixa<number> = { valor: 123 };
const caixaTexto: Caixa<string> = { valor: "al√¥" };

/**
 * ‚úÖ 2. Union Types (|) e Intersection Types (&)
 * 
 * Union (|) ‚Äî Um ou outro
 */

function imprimirId(id: number | string) {
  console.log("ID:", id);
}

imprimirId(123);
imprimirId("abc");

/**
 * Intersection (&) ‚Äî Combina√ß√£o de tipos
 */

interface Pessoa {
  nome: string;
}

interface Funcionario {
  cargo: string;
}

type PessoaFuncionario = Pessoa & Funcionario;

const joao: PessoaFuncionario = {
  nome: "Jo√£o",
  cargo: "Dev",
};

/**
 * ‚úÖ 3. Tipos utilit√°rios (utility types)
 * TypeScript j√° traz atalhos prontos pra manipular tipos.
 * Partial<T>: Torna tudo opcional
 */

interface Usuario {
  nome: string;
  idade: number;
}

const usuarioParcial: Partial<Usuario> = {
  nome: "Ana", // idade pode ser omitida
};

/**
 * Readonly<T>: Torna tudo somente leitura
 */

const usuarioReadonly: Readonly<Usuario> = {
  nome: "Gabriel",
  idade: 28,
};

// usuarioReadonly.nome = "Outro"; ‚ùå Erro

/**
 * Pick<T, K>: Pega s√≥ alguns campos
 */

type NomeUsuario = Pick<Usuario, "nome">;

const user: NomeUsuario = { nome: "Gabriel" };

/**
 * Omit<T, K>: Remove certos campos
 */

type SemIdade = Omit<Usuario, "idade">;

const u: SemIdade = { nome: "Lucas" };

/**
 * ‚úÖ 4. Type Narrowing (Refinamento de tipo)
 * Quando usamos typeof, in, ou instanceof para ‚Äúestreitar‚Äù um tipo union.
 */

function mostrar(valor: string | number) {
  if (typeof valor === "string") {
    console.log("Texto:", valor.toUpperCase());
  } else {
    console.log("N√∫mero:", valor.toFixed(2));
  }
}

/**
 * üß™ Exerc√≠cio do Dia 5:
 * 1. Crie uma fun√ß√£o criarCaixa<T> que receba um valor gen√©rico e retorne um objeto { valor: T }.
 * 2. Crie um type chamado UsuarioCompleto com nome, email, idade.
 * 3. Use Partial<UsuarioCompleto> para criar uma fun√ß√£o que receba atualiza√ß√µes parciais de um usu√°rio.
 * 4. Crie uma fun√ß√£o mostrarInfo que aceite um par√¢metro string | number e imprima diferente para cada caso.
 */

function criarCaixa<T>(valor: T): { valor: T} {
    return { valor }
}

type UsuarioCompleto = {
    nome: string
    email: string
    idade: number
}

function atualizarUsuario(dados: Partial<UsuarioCompleto>) {
  console.log("Atualizando com:", dados);
}

function mostrarInfo(parametro: string | number) {
    if (typeof parametro === "string") {
    console.log("Texto:", parametro.toUpperCase());
  } else {
    console.log("N√∫mero:", parametro.toFixed(2));
  }
}