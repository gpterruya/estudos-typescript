/**
 * üéØ Objetivo do Dia 5:
 * 1. Entender e usar Gen√©ricos (<T>)
 * 2. Aprender Union Types e Intersection Types
 * 3. Conhecer Tipos Utilit√°rios (Partial, Readonly, Pick, Omit)
 * 4. Ver o conceito de Type Narrowing (refinamento de tipo)
 */
/**
 * ‚úÖ 1. Gen√©ricos (<T>)
 * O que √©?
 * Gen√©ricos s√£o como tipos flex√≠veis e reutiliz√°veis. Voc√™ define um tipo "gen√©rico" que ser√° substitu√≠do por um tipo espec√≠fico no momento do uso.
 *
 * Exemplo b√°sico:
 */
function identidade(valor) {
    return valor;
}
var numero = identidade(42);
var texto = identidade("Gabriel");
/**
 * Aqui o <T> pode ser qualquer tipo (number, string, boolean, Pessoa, etc).
 */
/**
 * Gen√©ricos com Arrays:
 */
function primeiroElemento(arr) {
    return arr[0];
}
var primeiro = primeiroElemento(["a", "b", "c"]); // string
var caixaNumero = { valor: 123 };
var caixaTexto = { valor: "al√¥" };
/**
 * ‚úÖ 2. Union Types (|) e Intersection Types (&)
 *
 * Union (|) ‚Äî Um ou outro
 */
function imprimirId(id) {
    console.log("ID:", id);
}
imprimirId(123);
imprimirId("abc");
var joao = {
    nome: "Jo√£o",
    cargo: "Dev",
};
var usuarioParcial = {
    nome: "Ana", // idade pode ser omitida
};
/**
 * Readonly<T>: Torna tudo somente leitura
 */
var usuarioReadonly = {
    nome: "Gabriel",
    idade: 28,
};
var user = { nome: "Gabriel" };
var u = { nome: "Lucas" };
/**
 * ‚úÖ 4. Type Narrowing (Refinamento de tipo)
 * Quando usamos typeof, in, ou instanceof para ‚Äúestreitar‚Äù um tipo union.
 */
function mostrar(valor) {
    if (typeof valor === "string") {
        console.log("Texto:", valor.toUpperCase());
    }
    else {
        console.log("N√∫mero:", valor.toFixed(2));
    }
}
/**
 * üß™ Exerc√≠cio do Dia 5:
 * 1. Crie uma fun√ß√£o criarCaixa<T> que receba um valor gen√©rico e retorne um objeto { valor: T }.
 * 2. Crie um type chamado UsuarioCompleto com nome, email, idade.
 * 3. Use Partial<UsuarioCompleto> para criar uma fun√ß√£o que receba atualiza√ß√µes parciais de um usu√°rio.
 * 4. Crie uma fun√ß√£o mostrarInfo que aceite um par√¢metro string | number e imprima diferente para cada caso.
 */
function criarCaixa(valor) {
    return { valor: valor };
}
function atualizarUsuario(dados) {
    console.log("Atualizando com:", dados);
}
function mostrarInfo(parametro) {
    if (typeof parametro === "string") {
        console.log("Texto:", parametro.toUpperCase());
    }
    else {
        console.log("N√∫mero:", parametro.toFixed(2));
    }
}
